<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects | Kartik Nagar</title>
    <link>/project/</link>
      <atom:link href="/project/index.xml" rel="self" type="application/rss+xml" />
    <description>Projects</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 08 Oct 2019 15:22:58 -0400</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Projects</title>
      <link>/project/</link>
    </image>
    
    <item>
      <title>Automated Reasoning for Replicated Systems</title>
      <link>/project/replicated-systems/</link>
      <pubDate>Tue, 08 Oct 2019 15:22:58 -0400</pubDate>
      <guid>/project/replicated-systems/</guid>
      <description>&lt;p&gt;For global-scale applications such as Amazon, Twitter, Facebook, etc. with users distributed across the world, in order to provide a uniform low-latency and always available service, the application data needs to replicated at multiple servers across the world. Such replicated systems also facilitate other useful properties such as better scalability and fault tolerance, but they are very hard to program since they offer a completely different memory model to the programmers. Since the same data at different replicas can be concurrently updated and the updates can be applied in different orders at different replicas, this can result in subtle concurrency bugs for the applications running on top of replicated systems which can be hard to find through testing-based approaches. In this project, we proposed a number of automated static analysis-based approaches to reason about correctness of replicated database-backed applications.&lt;/p&gt;
&lt;h2 id=&#34;representative-publications&#34;&gt;Representative Publications:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;/publication/oopsla19/&#34;&gt;CLOTHO : Directed Test Generation for Weakly Consistent Database Systems&lt;/a&gt;.
Kia Rahmani, Kartik Nagar, Benjamin Delaware and Suresh Jagannathan. &lt;em&gt;OOPSLA 19&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/publication/cav19/&#34;&gt;Automated Parameterized Verification of CRDTs&lt;/a&gt;.
Kartik Nagar and Suresh Jagannathan. &lt;em&gt;CAV 19&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;[Automated Detection of Serializability Violations under Weak Consistency]({{ref &amp;ldquo;/publication/concur18/index.md&amp;rdquo;}}).
Kartik Nagar and Suresh Jagannathan. &lt;em&gt;CONCUR 18&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/publication/popl18/&#34;&gt;Alone Together: Compositional Reasoning and Inference for Weak Isolation&lt;/a&gt;.
Gowtham Kaki, Kartik Nagar, Mahsa Najafzadeh and Suresh Jagannathan. &lt;em&gt;POPL 18&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Timing Analysis for Real-time Systems</title>
      <link>/project/timing-analysis/</link>
      <pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate>
      <guid>/project/timing-analysis/</guid>
      <description>&lt;p&gt;In Real-time systems, e.g. automobiles, aircrafts, space shuttles, robots, etc. programs are executed in response to external stimuli and must finish their execution before fixed deadlines to ensure correct behavior. Hence, Worst Case Execution Time (WCET) becomes a very important correctness criterion for programs running on real-time systems. In this project, we proposed static analysis techniques to determine the WCET of programs, chiefly focusing on the impact of caches on timing of programs.&lt;/p&gt;
&lt;h2 id=&#34;representative-publications&#34;&gt;Representative Publications&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/publication/tecs17/&#34;&gt;Refining Cache Behaviour Prediction using Cache Miss Paths&lt;/a&gt;.
Kartik Nagar and YN Srikant. &lt;em&gt;TECS 17&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/publication/tecs16/&#34;&gt;Fast and Precise Worst Case Interference Placement for Shared Cache Analysis&lt;/a&gt;.
Kartik Nagar and YN Srikant. &lt;em&gt;TECS 16&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/publication/vmcai15/&#34;&gt;Path-sensitive Cache Analysis using Cache Miss Paths&lt;/a&gt;.
Kartik Nagar and YN Srikant. &lt;em&gt;VMCAI 15&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/publication/rtas14/&#34;&gt;Precise Shared Cache Analysis using Optimal Interference Placement&lt;/a&gt;.
Kartik Nagar and YN Srikant. &lt;em&gt;RTAS 14&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/publication/memocode-12/&#34;&gt;Interdependent Cache Analyses for better Precision and Safety&lt;/a&gt;.
Kartik Nagar and YN Srikant. &lt;em&gt;MEMOCODE 12&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
